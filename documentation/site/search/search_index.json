{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".comment{ color:#aaa; } Welcome to Angler's Edge Documentaion This applications allows users to easily find information about a species of fish, as well as how to catch that species in a specific location of their choosing. Development Stack Frontend - Vite-React, Typescript Backend - Django (5.1.0) Server - Nginx Database - SQLite Resources Version Control - GitHub Repo Project Management - ClickUp Project Design Files - Figma Mockups Project layout AnglersEdge/ \u251c\u2500\u2500 backend/ # Folder containing the backend portion of the app \u251c\u2500\u2500 frontend/ # Folder containing the frontend portion of the app \u251c\u2500\u2500 documentation/ # Folder containing the documentation portion of the app \u251c\u2500\u2500 docker-compose.yml # File to tell docker to build the app \u251c\u2500\u2500 README.md # GitHub Repo Read-Me","title":"Overview"},{"location":"#welcome-to-anglers-edge-documentaion","text":"This applications allows users to easily find information about a species of fish, as well as how to catch that species in a specific location of their choosing.","title":"Welcome to Angler's Edge Documentaion"},{"location":"#development-stack","text":"Frontend - Vite-React, Typescript Backend - Django (5.1.0) Server - Nginx Database - SQLite","title":"Development Stack"},{"location":"#resources","text":"Version Control - GitHub Repo Project Management - ClickUp Project Design Files - Figma Mockups","title":"Resources"},{"location":"#project-layout","text":"AnglersEdge/ \u251c\u2500\u2500 backend/ # Folder containing the backend portion of the app \u251c\u2500\u2500 frontend/ # Folder containing the frontend portion of the app \u251c\u2500\u2500 documentation/ # Folder containing the documentation portion of the app \u251c\u2500\u2500 docker-compose.yml # File to tell docker to build the app \u251c\u2500\u2500 README.md # GitHub Repo Read-Me","title":"Project layout"},{"location":"faq/","text":"AE - FAQ Due to the significant variations in software stacks, intended use cases, best practices, business logic, and organizational responsibilities across companies, I chose to limit certain implementations and features in this project. These aspects would need to be re-evaluated and adapted to align with the specific standards and requirements of any given organization. TLDR: I'm not lazy, I'm efficient and don't want to code something that won't ever be used/seen. 1. Why doesn\u2019t the app implement location-based trends or species-specific techniques? This app is designed as a demonstration project to showcase my skills in building a full-stack application, rather than as a production-ready app. Implementing the business logic for location-based trends and techniques would require significantly more time and domain-specific data, which is unnecessary for this proof-of-concept. If this were a production application, I would: - Implement data analysis tools to calculate location-based trends. - Integrate with real-time APIs for environmental data like weather or water conditions. - Use machine learning models or a rules-based system for species-specific suggestions. 2. Why is there no front-end testing? This app does not include front-end testing because it is intended only as a demonstration of my abilities, not a production-ready product. That said, I have outlined in the documentation how I would implement front-end testing if needed. For instance, I would: - Use Jest and React Testing Library for unit and integration testing of components. - Mock API responses using tools like Mock Service Worker (MSW) to simulate real-world scenarios. - Include snapshot tests for UI consistency and end-to-end tests using Cypress. - This omission was a trade-off to save time and focus on showcasing other areas of the application. 3. Why don\u2019t the Dockerfiles support hot-reloading in development? Hot-reloading for a development environment can be tricky to implement consistently across different systems due to differences in file system behaviors, especially with Docker's volume mounts on non-Linux systems. For this project, I opted to prioritize simplicity and reliability by providing instructions for setting up a custom development environment instead of over-complicating the Dockerfiles. If this were a production app with active development, I would: - Include Docker Compose configurations specifically tailored for development. - Use tools like docker-sync or configure file system polling to enable hot-reloading across platforms. 4. Why is the documentation's markdown code not fully optimized? The primary goal of this project was to demonstrate my ability to build a functional full-stack application, not to create perfectly optimized production code. While I formatted and styled the Markdown documentation to ensure it is easy to read, optimizing the code was not a priority. Given more time, I would: - Refactor repetitive code into reusable components. - Follow stricter linting rules and enforce consistent formatting. - Optimize API calls to reduce latency and improve performance. 5. Is this app secure for real-world use? No, this app is not intended for production use. It lacks: - Proper user authentication and authorization. - Secure handling of environment variables. - Robust error handling for edge cases. - These omissions are intentional, as the focus of the project is to demonstrate functionality, not production-level security.","title":"FAQ"},{"location":"faq/#ae-faq","text":"Due to the significant variations in software stacks, intended use cases, best practices, business logic, and organizational responsibilities across companies, I chose to limit certain implementations and features in this project. These aspects would need to be re-evaluated and adapted to align with the specific standards and requirements of any given organization. TLDR: I'm not lazy, I'm efficient and don't want to code something that won't ever be used/seen.","title":"AE - FAQ"},{"location":"faq/#1-why-doesnt-the-app-implement-location-based-trends-or-species-specific-techniques","text":"This app is designed as a demonstration project to showcase my skills in building a full-stack application, rather than as a production-ready app. Implementing the business logic for location-based trends and techniques would require significantly more time and domain-specific data, which is unnecessary for this proof-of-concept. If this were a production application, I would: - Implement data analysis tools to calculate location-based trends. - Integrate with real-time APIs for environmental data like weather or water conditions. - Use machine learning models or a rules-based system for species-specific suggestions.","title":"1. Why doesn\u2019t the app implement location-based trends or species-specific techniques?"},{"location":"faq/#2-why-is-there-no-front-end-testing","text":"This app does not include front-end testing because it is intended only as a demonstration of my abilities, not a production-ready product. That said, I have outlined in the documentation how I would implement front-end testing if needed. For instance, I would: - Use Jest and React Testing Library for unit and integration testing of components. - Mock API responses using tools like Mock Service Worker (MSW) to simulate real-world scenarios. - Include snapshot tests for UI consistency and end-to-end tests using Cypress. - This omission was a trade-off to save time and focus on showcasing other areas of the application.","title":"2. Why is there no front-end testing?"},{"location":"faq/#3-why-dont-the-dockerfiles-support-hot-reloading-in-development","text":"Hot-reloading for a development environment can be tricky to implement consistently across different systems due to differences in file system behaviors, especially with Docker's volume mounts on non-Linux systems. For this project, I opted to prioritize simplicity and reliability by providing instructions for setting up a custom development environment instead of over-complicating the Dockerfiles. If this were a production app with active development, I would: - Include Docker Compose configurations specifically tailored for development. - Use tools like docker-sync or configure file system polling to enable hot-reloading across platforms.","title":"3. Why don\u2019t the Dockerfiles support hot-reloading in development?"},{"location":"faq/#4-why-is-the-documentations-markdown-code-not-fully-optimized","text":"The primary goal of this project was to demonstrate my ability to build a functional full-stack application, not to create perfectly optimized production code. While I formatted and styled the Markdown documentation to ensure it is easy to read, optimizing the code was not a priority. Given more time, I would: - Refactor repetitive code into reusable components. - Follow stricter linting rules and enforce consistent formatting. - Optimize API calls to reduce latency and improve performance.","title":"4. Why is the documentation's markdown code not fully optimized?"},{"location":"faq/#5-is-this-app-secure-for-real-world-use","text":"No, this app is not intended for production use. It lacks: - Proper user authentication and authorization. - Secure handling of environment variables. - Robust error handling for edge cases. - These omissions are intentional, as the focus of the project is to demonstrate functionality, not production-level security.","title":"5. Is this app secure for real-world use?"},{"location":"setup/","text":"To Create A Local Application Instance NOTE: Hotloading files is not supported in this mode. To implement file changes, re-run the docker-compose command. 1. Clone the GitHub Repo: gh repo clone BobbyRobillard/AnglersEdge 2. Run Docker Compose: docker-compose up --build 3. Access App in Browser: localhost:5173 To Create A Local Development Enviornment Clone the GitHub Repo: gh repo clone BobbyRobillard/AnglersEdge Setup Backend: Follow instruction in Backend > Installation Setup Frontend: Follow instruction in Frontend > Installation","title":"Setup"},{"location":"setup/#to-create-a-local-application-instance","text":"NOTE: Hotloading files is not supported in this mode. To implement file changes, re-run the docker-compose command. 1. Clone the GitHub Repo: gh repo clone BobbyRobillard/AnglersEdge 2. Run Docker Compose: docker-compose up --build 3. Access App in Browser: localhost:5173","title":"To Create A Local Application Instance"},{"location":"setup/#to-create-a-local-development-enviornment","text":"Clone the GitHub Repo: gh repo clone BobbyRobillard/AnglersEdge Setup Backend: Follow instruction in Backend > Installation Setup Frontend: Follow instruction in Frontend > Installation","title":"To Create A Local Development Enviornment"},{"location":"backend/endpoints/","text":"API Endpoints GET /api/fish/ - Retrieve all fish species, and the details of each species. Expected Response: id : item.id | Unique identifier for the fish. species : item.species | Name of the species. bait : item.bait | List of bait associated with the fish food : item.food | List of food sources for the fish structure : item.structure | List of structures associated with the fish locations : item.locations | List of locations where the fish can be found trends : item.trends | List of trends related to the fish techniques : item.techniques | List of techniques for catching the fish tutorial_video : item.tutorial_video | URL for a tutorial video","title":"API Endpoints"},{"location":"backend/endpoints/#api-endpoints","text":"","title":"API Endpoints"},{"location":"backend/endpoints/#get","text":"/api/fish/ - Retrieve all fish species, and the details of each species. Expected Response: id : item.id | Unique identifier for the fish. species : item.species | Name of the species. bait : item.bait | List of bait associated with the fish food : item.food | List of food sources for the fish structure : item.structure | List of structures associated with the fish locations : item.locations | List of locations where the fish can be found trends : item.trends | List of trends related to the fish techniques : item.techniques | List of techniques for catching the fish tutorial_video : item.tutorial_video | URL for a tutorial video","title":"GET"},{"location":"backend/installation/","text":"Backend Documentation - Installation & setup Important Note This DOES NOT setup the frontend, you MUST do this seperate, unless you're using the docker-compose function. This assumes you already have the repo cloned and are in that folder. Setup Instructions Enter working directory Change to backend - cd backend Setup venv for local enviornment Venv Setup: python -m venv venv Activate Venv: source ./venv/bin/activate Install dependencies Install All Reqs. - pip install -r requirements.txt Setup the Database Make Migrations - python manage.py makemigrations Force Migrations - python manage.py migrate Load data into database Executable to load-fixtures - chmod +x ./load-fixtures Load in the fixtures - ./load-fixtures Run the server Start Server: python manage.py runserver 0.0.0.0:8000","title":"Installation"},{"location":"backend/installation/#backend-documentation-installation-setup","text":"","title":"Backend Documentation - Installation &amp; setup"},{"location":"backend/installation/#important-note","text":"This DOES NOT setup the frontend, you MUST do this seperate, unless you're using the docker-compose function. This assumes you already have the repo cloned and are in that folder.","title":"Important Note"},{"location":"backend/installation/#setup-instructions","text":"Enter working directory Change to backend - cd backend Setup venv for local enviornment Venv Setup: python -m venv venv Activate Venv: source ./venv/bin/activate Install dependencies Install All Reqs. - pip install -r requirements.txt Setup the Database Make Migrations - python manage.py makemigrations Force Migrations - python manage.py migrate Load data into database Executable to load-fixtures - chmod +x ./load-fixtures Load in the fixtures - ./load-fixtures Run the server Start Server: python manage.py runserver 0.0.0.0:8000","title":"Setup Instructions"},{"location":"backend/overview/","text":".comment{ color:#aaa; } Backend Documentation - Overview Summary The backend for the Anglers Edge project is built using Django and Django Rest Framework (DRF) . It acts as an API provider for the frontend, serving endpoints for fish species, locations, and user data. Key Technologies Python (^3.1.0) Django (5.1.0) Django Rest Framework (3.15.2) SQLite (default database) (3.35.4) Docker (Latest Downloadable Release) GitHub CLI (2.30.0) File Structure # Folder containg the app and required files backend \u251c\u2500\u2500 db.sqlite3 # SQLite database \u251c\u2500\u2500 manage.py # Django management script \u251c\u2500\u2500 requirements.txt # Python dependencies \u251c\u2500\u2500 secrets.txt # Environment variables \u251c\u2500\u2500 settings.py # Django settings \u251c\u2500\u2500 urls.py # Project URL routing \u2514\u2500\u2500 wsgi.py # WSGI application entry point # Main files and Application Management \u251c\u2500\u2500 ae/ \u2502 \u251c\u2500\u2500 settings.py # Manage the settings of the django application # API for accessing fish and location data \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 tests/ # See \"Testing\" Tab for Details \u2502 \u251c\u2500\u2500 migrations/ # Changes in the API models over time \u2502 \u251c\u2500\u2500 admin.py # Which models to display in admin interface \u2502 \u251c\u2500\u2500 models.py # Data structures to create in database \u2502 \u251c\u2500\u2500 serializers.py # Turns model details into a formatted API response \u2502 \u251c\u2500\u2500 urls.py # Manage local routing for the API app \u2502 \u251c\u2500\u2500 views.py # Handle tasks # Default data and setup material for immediate app useage \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 fixtures/ # Folder Containing all the default database entries \u2502 \u251c\u2500\u2500 *.json # Files containing pre-created models as json, to load into database at sta","title":"Overview"},{"location":"backend/overview/#backend-documentation-overview","text":"","title":"Backend Documentation - Overview"},{"location":"backend/overview/#summary","text":"The backend for the Anglers Edge project is built using Django and Django Rest Framework (DRF) . It acts as an API provider for the frontend, serving endpoints for fish species, locations, and user data.","title":"Summary"},{"location":"backend/overview/#key-technologies","text":"Python (^3.1.0) Django (5.1.0) Django Rest Framework (3.15.2) SQLite (default database) (3.35.4) Docker (Latest Downloadable Release) GitHub CLI (2.30.0)","title":"Key Technologies"},{"location":"backend/overview/#file-structure","text":"# Folder containg the app and required files backend \u251c\u2500\u2500 db.sqlite3 # SQLite database \u251c\u2500\u2500 manage.py # Django management script \u251c\u2500\u2500 requirements.txt # Python dependencies \u251c\u2500\u2500 secrets.txt # Environment variables \u251c\u2500\u2500 settings.py # Django settings \u251c\u2500\u2500 urls.py # Project URL routing \u2514\u2500\u2500 wsgi.py # WSGI application entry point # Main files and Application Management \u251c\u2500\u2500 ae/ \u2502 \u251c\u2500\u2500 settings.py # Manage the settings of the django application # API for accessing fish and location data \u251c\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 tests/ # See \"Testing\" Tab for Details \u2502 \u251c\u2500\u2500 migrations/ # Changes in the API models over time \u2502 \u251c\u2500\u2500 admin.py # Which models to display in admin interface \u2502 \u251c\u2500\u2500 models.py # Data structures to create in database \u2502 \u251c\u2500\u2500 serializers.py # Turns model details into a formatted API response \u2502 \u251c\u2500\u2500 urls.py # Manage local routing for the API app \u2502 \u251c\u2500\u2500 views.py # Handle tasks # Default data and setup material for immediate app useage \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 fixtures/ # Folder Containing all the default database entries \u2502 \u251c\u2500\u2500 *.json # Files containing pre-created models as json, to load into database at sta","title":"File Structure"},{"location":"deployment/overview/","text":"AE - Deployment Overview Key Technologies OS: Ubuntu 24.04 LTS Webserver: Nginx Django-host: Gunicorn Hosting Digital Ocean Droplet","title":"Overview"},{"location":"deployment/overview/#ae-deployment-overview","text":"","title":"AE - Deployment Overview"},{"location":"deployment/overview/#key-technologies","text":"OS: Ubuntu 24.04 LTS Webserver: Nginx Django-host: Gunicorn","title":"Key Technologies"},{"location":"deployment/overview/#hosting","text":"Digital Ocean Droplet","title":"Hosting"},{"location":"deployment/server_setup/","text":"AE - Server Setup NOTE: this assumes you have a clean ubuntu instance ready to go! 1. Update the blank server sudo apt update && sudo apt upgrade -y 2. Install dependancies sudo apt install python3 python3-pip python3-venv nginx curl git -y 3. Change into working directory cd /var/www/ 4. Clone the github repo git clone https://github.com/BobbyRobillard/AnglersEdge.git 5. Change into project folder cd AnglersEdge 6. Create and start a new virtual enviornment python3 -m venv venv source venv/bin/activate 7. Upgrade pip and install python requirements pip install --upgrade pip pip install -r requirements.txt pip install gunicorn # Note, this is seperate from reqs as it's only needed in production 8. Create Gunicorn service sudo nano /etc/systemd/system/gunicorn.service Insert the follow text into new file [Unit] Description=gunicorn daemon for AnglersEdge After=network.target [Service] User=root Group=root WorkingDirectory=/var/www/AnglersEdge/backend ExecStart=/var/www/AnglersEdge/backend/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 ae.wsgi:application [Install] WantedBy=multi-user.target 9. Reload daemon, start Gunicorn service sudo systemctl daemon-reload sudo systemctl start gunicorn sudo systemctl enable gunicorn sudo systemctl status gunicorn (Confirm the new service is working as expected) 10. Create the nginx site and .conf file sudo nano /etc/nginx/sites-available/anglersedge # Paste the code from \"nginx.conf\" sudo ln -s /etc/nginx/sites-available/anglersedge /etc/nginx/sites-enabled/ sudo rm /etc/nginx/sites-enabled/default # Remove default site sudo nginx -t # Test syntax before restarting sudo systemctl restart nginx 11. Setup firewall rules sudo ufw allow 'Nginx Full' sudo ufw allow 80 sudo ufw allow 22 sudo ufw allow 8000 sudo ufw enable sudo ufw status 12. Https Setup sudo apt install certbot python3-certbot-nginx -y sudo certbot --nginx -d <your-domain>","title":"Server Setup"},{"location":"deployment/server_setup/#ae-server-setup","text":"NOTE: this assumes you have a clean ubuntu instance ready to go!","title":"AE - Server Setup"},{"location":"deployment/server_setup/#1-update-the-blank-server","text":"sudo apt update && sudo apt upgrade -y","title":"1. Update the blank server"},{"location":"deployment/server_setup/#2-install-dependancies","text":"sudo apt install python3 python3-pip python3-venv nginx curl git -y","title":"2. Install dependancies"},{"location":"deployment/server_setup/#3-change-into-working-directory","text":"cd /var/www/","title":"3. Change into working directory"},{"location":"deployment/server_setup/#4-clone-the-github-repo","text":"git clone https://github.com/BobbyRobillard/AnglersEdge.git","title":"4. Clone the github repo"},{"location":"deployment/server_setup/#5-change-into-project-folder","text":"cd AnglersEdge","title":"5. Change into project folder"},{"location":"deployment/server_setup/#6-create-and-start-a-new-virtual-enviornment","text":"python3 -m venv venv source venv/bin/activate","title":"6. Create and start a new virtual enviornment"},{"location":"deployment/server_setup/#7-upgrade-pip-and-install-python-requirements","text":"pip install --upgrade pip pip install -r requirements.txt pip install gunicorn # Note, this is seperate from reqs as it's only needed in production","title":"7. Upgrade pip and install python requirements"},{"location":"deployment/server_setup/#8-create-gunicorn-service","text":"sudo nano /etc/systemd/system/gunicorn.service Insert the follow text into new file [Unit] Description=gunicorn daemon for AnglersEdge After=network.target [Service] User=root Group=root WorkingDirectory=/var/www/AnglersEdge/backend ExecStart=/var/www/AnglersEdge/backend/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 ae.wsgi:application [Install] WantedBy=multi-user.target","title":"8. Create Gunicorn service"},{"location":"deployment/server_setup/#9-reload-daemon-start-gunicorn-service","text":"sudo systemctl daemon-reload sudo systemctl start gunicorn sudo systemctl enable gunicorn sudo systemctl status gunicorn (Confirm the new service is working as expected)","title":"9. Reload daemon, start Gunicorn service"},{"location":"deployment/server_setup/#10-create-the-nginx-site-and-conf-file","text":"sudo nano /etc/nginx/sites-available/anglersedge # Paste the code from \"nginx.conf\" sudo ln -s /etc/nginx/sites-available/anglersedge /etc/nginx/sites-enabled/ sudo rm /etc/nginx/sites-enabled/default # Remove default site sudo nginx -t # Test syntax before restarting sudo systemctl restart nginx","title":"10. Create the nginx site and .conf file"},{"location":"deployment/server_setup/#11-setup-firewall-rules","text":"sudo ufw allow 'Nginx Full' sudo ufw allow 80 sudo ufw allow 22 sudo ufw allow 8000 sudo ufw enable sudo ufw status","title":"11. Setup firewall rules"},{"location":"deployment/server_setup/#12-https-setup","text":"sudo apt install certbot python3-certbot-nginx -y sudo certbot --nginx -d <your-domain>","title":"12. Https Setup"},{"location":"frontend/installation/","text":"Frontend Documentation - Installation & setup Important Note This DOES NOT setup the backend, you MUST do this seperate, unless you're using the docker-compose function. Setup Instructions Enter Working Directory Change to Directory: cd ./frontend/react-frontend/ Install NodeJS and npm Install All Reqs: sudo apt install nodejs npm Install dependencies Install All Reqs: npm install Start the development server Start Server: npm run dev Open the App URL: http://localhost:5173","title":"Installation"},{"location":"frontend/installation/#frontend-documentation-installation-setup","text":"","title":"Frontend Documentation - Installation &amp; setup"},{"location":"frontend/installation/#important-note","text":"This DOES NOT setup the backend, you MUST do this seperate, unless you're using the docker-compose function.","title":"Important Note"},{"location":"frontend/installation/#setup-instructions","text":"Enter Working Directory Change to Directory: cd ./frontend/react-frontend/ Install NodeJS and npm Install All Reqs: sudo apt install nodejs npm Install dependencies Install All Reqs: npm install Start the development server Start Server: npm run dev Open the App URL: http://localhost:5173","title":"Setup Instructions"},{"location":"frontend/overview/","text":".comment{ color:#aaa; } Frontend Documentation - Overview Summary The frontend for Anglers Edge is built with Vite and React . It provides a responsive user interface for users to explore fishing species, locations, and tips. Key Technologies npm : JavaScript package manager (^10.9.0) NodeJS : JavaScript runtime (dev server) (^20.0.0) React : JavaScript library for building user interfaces (^18.2.0) Vite : Fast development server and build tool (^6.0.0) Axios : HTTP client for API integration (^1.7.0) Bootstrap : For styling (^5.1.0) File Structure frontend/ \u251c\u2500\u2500 public/ # Static assets \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ # Media (Images, MP3, MP4) \u2502 \u251c\u2500\u2500 components/ # Reusable React components \u2502 \u251c\u2500\u2500 pages/ # Page-level components \u2502 \u251c\u2500\u2500 services/ # API calls and helpers \u2502 \u251c\u2500\u2500 App.jsx # Main app entry point \u2502 \u2514\u2500\u2500 index.js # Application entry point \u251c\u2500\u2500 index.html # Index file for displaying application \u251c\u2500\u2500 package.json # Project dependencies and scripts \u2514\u2500\u2500 vite.config.js # Vite configuration","title":"Overview"},{"location":"frontend/overview/#frontend-documentation-overview","text":"","title":"Frontend Documentation - Overview"},{"location":"frontend/overview/#summary","text":"The frontend for Anglers Edge is built with Vite and React . It provides a responsive user interface for users to explore fishing species, locations, and tips.","title":"Summary"},{"location":"frontend/overview/#key-technologies","text":"npm : JavaScript package manager (^10.9.0) NodeJS : JavaScript runtime (dev server) (^20.0.0) React : JavaScript library for building user interfaces (^18.2.0) Vite : Fast development server and build tool (^6.0.0) Axios : HTTP client for API integration (^1.7.0) Bootstrap : For styling (^5.1.0)","title":"Key Technologies"},{"location":"frontend/overview/#file-structure","text":"frontend/ \u251c\u2500\u2500 public/ # Static assets \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 assets/ # Media (Images, MP3, MP4) \u2502 \u251c\u2500\u2500 components/ # Reusable React components \u2502 \u251c\u2500\u2500 pages/ # Page-level components \u2502 \u251c\u2500\u2500 services/ # API calls and helpers \u2502 \u251c\u2500\u2500 App.jsx # Main app entry point \u2502 \u2514\u2500\u2500 index.js # Application entry point \u251c\u2500\u2500 index.html # Index file for displaying application \u251c\u2500\u2500 package.json # Project dependencies and scripts \u2514\u2500\u2500 vite.config.js # Vite configuration","title":"File Structure"},{"location":"testing/backend_tests/","text":"AE - Backend Testing Created By: Robert Robillard Frameworks Django's built-in testing framework Running Tests Run all tests: python manage.py test","title":"Backend Tests"},{"location":"testing/backend_tests/#ae-backend-testing","text":"Created By: Robert Robillard","title":"AE - Backend Testing"},{"location":"testing/backend_tests/#frameworks","text":"Django's built-in testing framework","title":"Frameworks"},{"location":"testing/backend_tests/#running-tests","text":"Run all tests: python manage.py test","title":"Running Tests"},{"location":"testing/frontend_tests/","text":"AE - Frontend Testing Currently, no testing is in place. As per the project outline, this is simply a demonstration and thus I did not implement full end-to-end (E2E), user-interface, or unit-testing for the frontend. Ideal Frameworks Jest > Snapshot Testing React Testing Libray > Unit Testing MSW > Mocking API Calls Cyprus > E2E Testing","title":"Frontend Tests"},{"location":"testing/frontend_tests/#ae-frontend-testing","text":"Currently, no testing is in place. As per the project outline, this is simply a demonstration and thus I did not implement full end-to-end (E2E), user-interface, or unit-testing for the frontend.","title":"AE - Frontend Testing"},{"location":"testing/frontend_tests/#ideal-frameworks","text":"Jest > Snapshot Testing React Testing Libray > Unit Testing MSW > Mocking API Calls Cyprus > E2E Testing","title":"Ideal Frameworks"}]}